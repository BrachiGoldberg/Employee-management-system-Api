// <auto-generated />
using System;
using Employees.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Employees.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240331135334_FixEmployeePosition")]
    partial class FixEmployeePosition
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Employees.Core.Entites.AttendanceJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("BeginningTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndingTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AttendanceJounals");
                });

            modelBuilder.Entity("Employees.Core.Entites.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("BankNunber")
                        .HasColumnType("int");

                    b.Property<int>("BranchNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Employees.Core.Entites.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermsId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TermsId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Employees.Core.Entites.CompanyTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthDays")
                        .HasColumnType("int");

                    b.Property<int>("Clothing")
                        .HasColumnType("int");

                    b.Property<int>("DaySalariesCalculation")
                        .HasColumnType("int");

                    b.Property<int>("Gifts")
                        .HasColumnType("int");

                    b.Property<double>("Meals")
                        .HasColumnType("float");

                    b.Property<double>("NightShiftPrecent")
                        .HasColumnType("float");

                    b.Property<int>("Recovery")
                        .HasColumnType("int");

                    b.Property<double>("ShabbatShiftPrecent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CompanyTerms");
                });

            modelBuilder.Entity("Employees.Core.Entites.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartJob")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TermsId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Employees.Core.Entites.EmployeePosition", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartPositionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeePosition");
                });

            modelBuilder.Entity("Employees.Core.Entites.EmployeeTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EducationFund")
                        .HasColumnType("int");

                    b.Property<double>("HourlyWage")
                        .HasColumnType("float");

                    b.Property<int>("MonthlyHoursCount")
                        .HasColumnType("int");

                    b.Property<double>("OvertimePay")
                        .HasColumnType("float");

                    b.Property<int>("SickDays")
                        .HasColumnType("int");

                    b.Property<double>("TravelExpenses")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTerms");
                });

            modelBuilder.Entity("Employees.Core.Entites.Manager", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Employees.Core.Entites.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Employees.Core.Entites.AttendanceJournal", b =>
                {
                    b.HasOne("Employees.Core.Entites.Employee", null)
                        .WithMany("AttendanceJournals")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Employees.Core.Entites.Company", b =>
                {
                    b.HasOne("Employees.Core.Entites.CompanyTerms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Employees.Core.Entites.Employee", b =>
                {
                    b.HasOne("Employees.Core.Entites.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employees.Core.Entites.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employees.Core.Entites.EmployeeTerms", "Terms")
                        .WithMany()
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Company");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Employees.Core.Entites.EmployeePosition", b =>
                {
                    b.HasOne("Employees.Core.Entites.Employee", "Employee")
                        .WithMany("Positions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employees.Core.Entites.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Employees.Core.Entites.Manager", b =>
                {
                    b.HasOne("Employees.Core.Entites.Company", null)
                        .WithOne("Manager")
                        .HasForeignKey("Employees.Core.Entites.Manager", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employees.Core.Entites.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Manager")
                        .IsRequired();
                });

            modelBuilder.Entity("Employees.Core.Entites.Employee", b =>
                {
                    b.Navigation("AttendanceJournals");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Employees.Core.Entites.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
